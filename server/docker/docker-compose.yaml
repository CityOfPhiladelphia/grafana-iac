name: Grafana

services:
  grafana:
    image: grafana/grafana:12.2.1
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_FEATURE_TOGGLES_ENABLE=alertingSimplifiedRouting,alertingQueryAndExpressionsStepMode
      - GF_SERVER_DOMAIN
      - GF_SERVER_ROOT_URL
      # Custom plugin install
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=weastie-anypointmonitoring-datasource
      - GF_PLUGINS_PREINSTALL=weastie-anypointmonitoring-datasource@0.0.3@https://github.com/CityOfPhiladelphia/AnypointMonitoringGrafanaDatasource/releases/download/v0.0.3/weastie-anypointmonitoring-datasource-0.0.3.zip
      # Database connection
      - GF_DATABASE_TYPE=postgres
      # EMPTY VALUES ON THE RIGHT MEANS THAT IT WILL PULL IN THE ENVIRONMENT
      # FROM THE HOST. So, if you the machine running docker-compose has
      # GF_DATABASE_HOST env variable set to "abcd", then this will carry
      # through to the Grafana docker container.
      - GF_DATABASE_HOST
      - GF_DATABASE_NAME
      - GF_DATABASE_USER
      - GF_DATABASE_SSL_MODE=require
      - GF_DATABASE_PASSWORD
      # Azure AD
      - GF_AUTH_AZUREAD_NAME=Azure AD
      - GF_AUTH_AZUREAD_ENABLED=false
      - GF_AUTH_AZUREAD_ALLOW_SIGN_UP=true
      - GF_AUTH_AZUREAD_AUTO_LOGIN=false
      - GF_AUTH_AZUREAD_CLIENT_AUTHENTICATION=client_secret_post
      - GF_AUTH_AZUREAD_CLIENT_ID
      - GF_AUTH_AZUREAD_CLIENT_SECRET
      - GF_AUTH_AZUREAD_SCOPES=openid email profile
      - GF_AUTH_AZUREAD_AUTH_URL
      - GF_AUTH_AZUREAD_TOKEN_URL
    ports:
      - "80:3000"
    networks:
      - loki
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    restart: always

  loki:
    image: grafana/loki:3.5.5
    # Expose loki port internally so nginx can access it
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    expose:
      - "3100"

  #prometheus:
  #  image: prom/prometheus:main
  #  # Expose prometheus port internally so nginx can access it
  #  expose:
  #    - "9090"
  #  command:
  #    - --web.enable-remote-write-receiver
  #    - --config.file=/etc/prometheus/prometheus.yml
  #  networks:
  #    - loki

  mimir:
    image: grafana/mimir:2.17.1
    # Expose mimir port internally so nginx can access it
    volumes:
      - ./mimir/mimir.yaml:/etc/mimir.yaml
    environment:
      - MIMIR_MODE=all
    ports:
      - "7946:7946"
      - "9095:9095"
    networks:
      - loki
    command: -config.file=/etc/mimir.yaml
    restart: always
    expose:
      - "8080"

  nginx:
    # dclint disable-line
    image: nginx:stable
    depends_on:
      - loki
      - mimir
    volumes:
      - ./nginx/.htpasswd.loki:/etc/nginx/.htpasswd.loki
      - ./nginx/.htpasswd.prometheus:/etc/nginx/.htpasswd.prometheus
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    environment:
      - LOKI_USER
      - LOKI_PASS
      - PROM_USER
      - PROM_PASS
    ports:
      - "3100:3100"
      - "9090:9090"
    networks:
      - loki
    restart: always

networks:
  loki:
